@page "/staff"
@using VoyageCare.Shared
@using Blazorise
@using Blazorise.Components
@using Blazorise.Icons.FontAwesome
@inject VoyageCareClient Http

<PageTitle>Staff</PageTitle>

<h1>Staff</h1>

@if (_homes == null)
{
    <p><em>Loading...</em></p>

    return;
}

<DropdownList @ref="ddlCareHome"
              TItem="CareHome" TValue="int"
              Data="@_homes"
              TextField="@((item)=>item.Name)"
              ValueField="@((item)=>item.CareHomeID)"
              Color="Color.Primary"
              MaxMenuHeight="200px"
              SelectedValueChanged="CareHomeSelected"
              class="float-left">
    @(@_homes?.FirstOrDefault(x => x.CareHomeID == _selectedCareHomeID)?.Name ?? "Select Care Home")
</DropdownList>

<button type="button" class="btn btn-primary float-right" @onclick="NewStaff" hidden="@(_selectedCareHomeID <= 0)" >New Staff</button>

@if (_staff == null)
{
    return;
}   

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var staff in _staff)
        {
            <tr>
                <td style="width: 1px; padding-top: 10px;">
                    <Button Clicked="() => DeleteStaff(staff.CareHomeStaffID)">
                        <Blazorise.Icons.FontAwesome.Icon Name="FontAwesomeIcons.Trash" />
                    </Button></td>
                <td>
                    <Button Clicked="() => EditStaff(staff.CareHomeStaffID)">
                        @staff.Forename @staff.Surname
                    </Button>
                </td>
            </tr>
        }
    </tbody>
</table>  



<Modal @bind-Visible="@_modalVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Edit Staff</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Forename</FieldLabel>
                <TextEdit Placeholder="Enter forename..." @bind-Text="@_careHomeStaff.Forename" />
            </Field>
            <Field>
                <FieldLabel>Surname</FieldLabel>
                <TextEdit Placeholder="Enter surname..." @bind-Text="@_careHomeStaff.Surname" />
            </Field>
            <Field>
                <FieldLabel>Date of Birth</FieldLabel>
                <DateEdit TValue="DateTime" @bind-Date="@_careHomeStaff.DOB" />
            </Field>
            <Field>
                <FieldLabel>Job Title</FieldLabel>
                <TextEdit Placeholder="Enter job title..." @bind-Text="@_careHomeStaff.JobTitle" />
            </Field>
            <Field>
                <FieldLabel>Annual Salary</FieldLabel>
                <NumericPicker TValue="int" CurrencySymbol="£" @bind-Value="_careHomeStaff.AnnualSalary" Decimals="0" Step="500" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@SaveStaff">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code{
    private List<VoyageCare.Shared.CareHome>? _homes;
    private List<VoyageCare.Shared.CareHomeStaff>? _staff;
    private int _selectedCareHomeID = -1;
    private int _staffID = -1;
    private DropdownList<CareHome, int> ddlCareHome;
    private CareHomeStaff _careHomeStaff = new CareHomeStaff();
    private bool _modalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        _homes = await Http.GetAllCareHomesAsync();
        await base.OnInitializedAsync();
    }


    private async void NewStaff()
    {
        _staffID = 0;

        _careHomeStaff = new CareHomeStaff
        {
            CareHomeID = _selectedCareHomeID
        };

        _modalVisible = true;

        await InvokeAsync(StateHasChanged);
    }


    private async void EditStaff(int staffID)
    {
        _staffID = staffID;

        _careHomeStaff = (await Http.GetCareHomeStaffAsync(staffID)) ?? new CareHomeStaff() ;

        _modalVisible = true;

        await InvokeAsync(StateHasChanged);
    }


    private async void DeleteStaff(int staffID)
    {
        await Http.DeleteCareHomeStaffAsync(staffID);

        _staff = await Http.GetAllCareHomeStaffAsync(_selectedCareHomeID);

        await InvokeAsync(StateHasChanged);
    }


    private async void CareHomeSelected()
    {
        _careHomeStaff.CareHomeID = _selectedCareHomeID = ddlCareHome.SelectedValue;

        _staff = await Http.GetAllCareHomeStaffAsync(_selectedCareHomeID);

        await InvokeAsync(StateHasChanged);
    }


    private void HideModal()
    {
        _staffID = -1;
        _modalVisible = false;
    }


    private async Task SaveStaff()
    {
        try
        {
            await Http.SaveCareHomeStaffAsync(_careHomeStaff);
        }
        catch (Exception ex)
        {
            // _errorText = ex.Message; TODO   
        }

        CareHomeSelected();
        HideModal();
    }
}
